// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.3
// source: transport/opencmad.proto

package transport

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request opencmad数据采集请求数据
type CollectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PullNodes []string `protobuf:"bytes,1,rep,name=PullNodes,proto3" json:"PullNodes,omitempty"` // 数据拉取节点列表，包括源节点和中间节点
}

func (x *CollectRequest) Reset() {
	*x = CollectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transport_opencmad_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectRequest) ProtoMessage() {}

func (x *CollectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transport_opencmad_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectRequest.ProtoReflect.Descriptor instead.
func (*CollectRequest) Descriptor() ([]byte, []int) {
	return file_transport_opencmad_proto_rawDescGZIP(), []int{0}
}

func (x *CollectRequest) GetPullNodes() []string {
	if x != nil {
		return x.PullNodes
	}
	return nil
}

// CollectResponse opencmad数据采集响应数据
type CollectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeName     string         `protobuf:"bytes,1,opt,name=NodeName,proto3" json:"NodeName,omitempty"`         // tag，主机名
	NodeType     string         `protobuf:"bytes,2,opt,name=NodeType,proto3" json:"NodeType,omitempty"`         // tag，主机类型
	PullNodes    []string       `protobuf:"bytes,3,rep,name=PullNodes,proto3" json:"PullNodes,omitempty"`       // 数据拉取节点列表，包括源节点和中间节点
	CollectDatas []*CollectData `protobuf:"bytes,4,rep,name=CollectDatas,proto3" json:"CollectDatas,omitempty"` // 传递数据
}

func (x *CollectResponse) Reset() {
	*x = CollectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transport_opencmad_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectResponse) ProtoMessage() {}

func (x *CollectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transport_opencmad_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectResponse.ProtoReflect.Descriptor instead.
func (*CollectResponse) Descriptor() ([]byte, []int) {
	return file_transport_opencmad_proto_rawDescGZIP(), []int{1}
}

func (x *CollectResponse) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *CollectResponse) GetNodeType() string {
	if x != nil {
		return x.NodeType
	}
	return ""
}

func (x *CollectResponse) GetPullNodes() []string {
	if x != nil {
		return x.PullNodes
	}
	return nil
}

func (x *CollectResponse) GetCollectDatas() []*CollectData {
	if x != nil {
		return x.CollectDatas
	}
	return nil
}

// CollectData opencmad数据采集通用数据存储格式
type CollectData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time        int64              `protobuf:"varint,1,opt,name=Time,proto3" json:"Time,omitempty"`                                                                                              // 时间
	Measurement string             `protobuf:"bytes,2,opt,name=Measurement,proto3" json:"Measurement,omitempty"`                                                                                 // influxdb中的数据表名
	Tags        map[string]string  `protobuf:"bytes,3,rep,name=Tags,proto3" json:"Tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`       // influxdb中的tag，可索引的字段
	Fields      map[string]float64 `protobuf:"bytes,4,rep,name=Fields,proto3" json:"Fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"` // influxdb中的field
}

func (x *CollectData) Reset() {
	*x = CollectData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transport_opencmad_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectData) ProtoMessage() {}

func (x *CollectData) ProtoReflect() protoreflect.Message {
	mi := &file_transport_opencmad_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectData.ProtoReflect.Descriptor instead.
func (*CollectData) Descriptor() ([]byte, []int) {
	return file_transport_opencmad_proto_rawDescGZIP(), []int{2}
}

func (x *CollectData) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *CollectData) GetMeasurement() string {
	if x != nil {
		return x.Measurement
	}
	return ""
}

func (x *CollectData) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CollectData) GetFields() map[string]float64 {
	if x != nil {
		return x.Fields
	}
	return nil
}

var File_transport_opencmad_proto protoreflect.FileDescriptor

var file_transport_opencmad_proto_rawDesc = []byte{
	0x0a, 0x18, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6d, 0x61, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x17, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2e,
	0x0a, 0x0e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x50, 0x75, 0x6c, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x50, 0x75, 0x6c, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0xa3,
	0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x75,
	0x6c, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x50,
	0x75, 0x6c, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0c, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x22, 0xa9, 0x02, 0x0a, 0x0b, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x04, 0x54, 0x61,
	0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x54, 0x61, 0x67, 0x73,
	0x12, 0x3a, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0x37, 0x0a, 0x09,
	0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x32, 0x8a, 0x01, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x4d, 0x41, 0x44, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x12,
	0x19, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x16,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x69, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x1a, 0x15, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x4d, 0x73, 0x67, 0x42, 0x0c, 0x5a,
	0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_transport_opencmad_proto_rawDescOnce sync.Once
	file_transport_opencmad_proto_rawDescData = file_transport_opencmad_proto_rawDesc
)

func file_transport_opencmad_proto_rawDescGZIP() []byte {
	file_transport_opencmad_proto_rawDescOnce.Do(func() {
		file_transport_opencmad_proto_rawDescData = protoimpl.X.CompressGZIP(file_transport_opencmad_proto_rawDescData)
	})
	return file_transport_opencmad_proto_rawDescData
}

var file_transport_opencmad_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_transport_opencmad_proto_goTypes = []interface{}{
	(*CollectRequest)(nil),  // 0: transport.CollectRequest
	(*CollectResponse)(nil), // 1: transport.CollectResponse
	(*CollectData)(nil),     // 2: transport.CollectData
	nil,                     // 3: transport.CollectData.TagsEntry
	nil,                     // 4: transport.CollectData.FieldsEntry
	(*GenericNode)(nil),     // 5: transport.GenericNode
	(*GenericMsg)(nil),      // 6: transport.GenericMsg
}
var file_transport_opencmad_proto_depIdxs = []int32{
	2, // 0: transport.CollectResponse.CollectDatas:type_name -> transport.CollectData
	3, // 1: transport.CollectData.Tags:type_name -> transport.CollectData.TagsEntry
	4, // 2: transport.CollectData.Fields:type_name -> transport.CollectData.FieldsEntry
	0, // 3: transport.OpenCMADService.Collect:input_type -> transport.CollectRequest
	5, // 4: transport.OpenCMADService.Ping:input_type -> transport.GenericNode
	1, // 5: transport.OpenCMADService.Collect:output_type -> transport.CollectResponse
	6, // 6: transport.OpenCMADService.Ping:output_type -> transport.GenericMsg
	5, // [5:7] is the sub-list for method output_type
	3, // [3:5] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_transport_opencmad_proto_init() }
func file_transport_opencmad_proto_init() {
	if File_transport_opencmad_proto != nil {
		return
	}
	file_transport_generic_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_transport_opencmad_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transport_opencmad_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transport_opencmad_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_transport_opencmad_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_transport_opencmad_proto_goTypes,
		DependencyIndexes: file_transport_opencmad_proto_depIdxs,
		MessageInfos:      file_transport_opencmad_proto_msgTypes,
	}.Build()
	File_transport_opencmad_proto = out.File
	file_transport_opencmad_proto_rawDesc = nil
	file_transport_opencmad_proto_goTypes = nil
	file_transport_opencmad_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// OpenCMADServiceClient is the client API for OpenCMADService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OpenCMADServiceClient interface {
	Collect(ctx context.Context, in *CollectRequest, opts ...grpc.CallOption) (*CollectResponse, error)
	Ping(ctx context.Context, in *GenericNode, opts ...grpc.CallOption) (*GenericMsg, error)
}

type openCMADServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOpenCMADServiceClient(cc grpc.ClientConnInterface) OpenCMADServiceClient {
	return &openCMADServiceClient{cc}
}

func (c *openCMADServiceClient) Collect(ctx context.Context, in *CollectRequest, opts ...grpc.CallOption) (*CollectResponse, error) {
	out := new(CollectResponse)
	err := c.cc.Invoke(ctx, "/transport.OpenCMADService/Collect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openCMADServiceClient) Ping(ctx context.Context, in *GenericNode, opts ...grpc.CallOption) (*GenericMsg, error) {
	out := new(GenericMsg)
	err := c.cc.Invoke(ctx, "/transport.OpenCMADService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpenCMADServiceServer is the server API for OpenCMADService service.
type OpenCMADServiceServer interface {
	Collect(context.Context, *CollectRequest) (*CollectResponse, error)
	Ping(context.Context, *GenericNode) (*GenericMsg, error)
}

// UnimplementedOpenCMADServiceServer can be embedded to have forward compatible implementations.
type UnimplementedOpenCMADServiceServer struct {
}

func (*UnimplementedOpenCMADServiceServer) Collect(context.Context, *CollectRequest) (*CollectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Collect not implemented")
}
func (*UnimplementedOpenCMADServiceServer) Ping(context.Context, *GenericNode) (*GenericMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}

func RegisterOpenCMADServiceServer(s *grpc.Server, srv OpenCMADServiceServer) {
	s.RegisterService(&_OpenCMADService_serviceDesc, srv)
}

func _OpenCMADService_Collect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenCMADServiceServer).Collect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transport.OpenCMADService/Collect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenCMADServiceServer).Collect(ctx, req.(*CollectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenCMADService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenericNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenCMADServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transport.OpenCMADService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenCMADServiceServer).Ping(ctx, req.(*GenericNode))
	}
	return interceptor(ctx, in, info, handler)
}

var _OpenCMADService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "transport.OpenCMADService",
	HandlerType: (*OpenCMADServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Collect",
			Handler:    _OpenCMADService_Collect_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _OpenCMADService_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transport/opencmad.proto",
}
